openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Ddall/Grekko/1.0.0
info:
  description: This is the backend for Grekko, a geoprocessing API
  version: "0.0.1"
  title: Grekko
  contact:
    email: awesomealpineibex@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: geocoding
    description: Geocoding operations, they may evolve to query parameters in the future
  - name: vehicle routing
    description: Operations involving vehicle routing and most efficient paths

paths:
  /geocoding/reverse:
    get:
      tags:
        - geocoding
      summary: Performs forward geocoding on a postcode
      operationId: reverseGeocoding
      description: |
        # Reverse Geocoding
        By providing a latitude and longitude, you will recieve a postcode.
      parameters:
        - in: path
          name: latitude
          description: the latitude of the coordinate
          required: true
          schema:
            type: number
        - in: path
          name: longitude
          description: the longitude of the coordinate
          required: true
          schema:
            type: number
      responses:
        '200':
          description: search results matching criteria
          content:
            text/plain:
              schema:
                type: string
                example: BS11AA
        '404':
          description: coordinates don't exist
  /geocoding/forward:
    get:
      tags:
        - geocoding
      summary: Performs forward geocoding on a postcode
      operationId: forwardGeocoding
      description: |
        # Forward geocoding
        By providing a valid postcode, you will recieve a latitude and longitude for it.
      parameters:
        - in: path
          name: postcode
          description: the postcode to convert
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            text/plain:
              schema:
                type: string
                example: 51.509865,-0.118092
        '404':
          description: postcode doesn't exist
  /routing/solver/simple:
    get:
      tags:
        - vehicle routing
      summary: Perform a simple vehicle routing problem with minimal constraints
      operationId: simpleProblem
      description: |
        # Simple Vehicle Routing Problem
        This endpoint will allow you to pass simple query parameters of vehicles and jobs, this would then calculate the best solution in the most minimum time possible if all vehicles end at their start position.
      parameters:
        - in: query
          name: coordinateVehicles
          description: The list of vehicle coordinates that would be input to the problem matrix. This is required if postcodeVehicles were not supplied.
          required: false
          schema:
            type: array
            items:
              type: string
              example: "51.509865,-0.118092;"
        - in: query
          name: coordinateJobs
          description: The list of job coordinates that would be input to the problem matrix. This is required if postcodeJobs were not supplied.
          required: false
          schema:
            type: array
            items:
              type: string
              example: "51.509865,-0.118092;"
        - in: query
          name: postcodeVehicles
          description: The list of vehicle postcodes that would be input to the problem matrix. This is required if coordinateVehicles were not supplied.
          required: false
          schema:
            type: array
            items:
              type: string
              example: "BS11AA;"
        - in: query
          name: postcodeJobs
          description: The list of job postcodes that would be input to the problem matrix. This is required if coordinateJobs were not supplied.
          required: false
          schema:
            type: array
            items:
              type: string
              example: "BS11AA;"
      responses:
        '200':
          description: The route response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSolution'
        '400':
          description: Bad input parameters
        '422':
          description: Input postcodes/coordinates could not be found
  /routing/solver:
    post:
      tags:
        - vehicle routing
      summary: Perform a vehicle routing problem
      operationId: problem
      description: |
        # Vehicle Routing Problem
        This endpoint will allow you to pass simple query parameters of vehicles and jobs, this would then calculate the best solution in the most minimum time possible if all vehicles end at their start position.
      requestBody:
        description: the request body encompasses all required parameters to try and solve the problem
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Problem'
      responses:
        '200':
          description: The route response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solution'
        '400':
          description: Bad input parameters
        '422':
          description: Input postcodes/coordinates could not be found

components:
  schemas:
    Problem:
      type: object
      required:
        - plan
      properties:
        plan:
          $ref: '#/components/schemas/Plan'
        fleet:
          $ref: '#/components/schemas/Fleet'

    Fleet:
      required:
        - vehicles
        - profiles
      properties:
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/VehicleType'
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/Profile'

    VehicleType:
      required:
        - type_id
        - vehicle_ids
        - profile
        - costs
        - shifts
        - capacity
      properties:
        type_id:
          type: string
        vehicle_ids:
          type: array
          items:
            type: string
        profile:
          type: string
        costs:
          $ref: '#/components/schemas/VehicleCosts'
        shifts:
          type: array
          items:
            $ref: '#/components/schemas/VehicleShift'
        capacity:
          type: array
          items:
            type: number
            example: 1
        skills:
          $ref: '#/components/schemas/Skills'
        limits:
          $ref: '#/components/schemas/VehicleLimits'

    Profile:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
        speed:
          type: number

    VehicleShift:
      type: object
      required:
        - start
      properties:
        start:
          $ref: '#/components/schemas/VehiclePlace'
        end:
          $ref: '#/components/schemas/VehiclePlace'
        breaks:
          type: array
          items:
            $ref: '#/components/schemas/VehicleBreak'
        reloads:
          type: array
          items:
            $ref: '#/components/schemas/VehicleReload'

    VehicleReload:
      type: object
      required:
        - location
        - duration
      properties:
        location:
          $ref: '#/components/schemas/Location'
        duration:
          $ref: '#/components/schemas/Duration'
        times:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Time'
        tag:
          type: string
    VehicleBreak:
      type: object
      required:
        - time
        - duration
      properties:
        time:
          $ref: '#/components/schemas/Time'
#          $ref: '#/components/schemas/VehicleBreakTime'
        duration:
          $ref: '#/components/schemas/Duration'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'

    VehiclePlace:
      type: object
      required:
        - time
        - location
      properties:
        time:
          $ref: '#/components/schemas/Time'
        location:
          $ref: '#/components/schemas/Location'

    VehicleCosts:
      type: object
      required:
        - distance
        - time
      properties:
        distance:
          type: number
        time:
          description: cost per time  unit
          type: number
        duration:
          $ref: '#/components/schemas/Duration'
    Plan:
      required:
        - jobs
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        relations:
          type: array
          items:
            $ref: '#/components/schemas/Relation'

    Job:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 2932872OX
        pickups:
          type: array
          items:
            $ref: '#/components/schemas/JobTask'
        deliveries:
          type: array
          items:
            $ref: '#/components/schemas/JobTask'
        replacements:
          type: array
          items:
            $ref: '#/components/schemas/JobTask'
        services:
          type: array
          items:
            $ref: '#/components/schemas/JobTask'
        priority:
          type: number
          description: lower the better flesh this out
          example: 1
        skills:
          $ref: '#/components/schemas/Skills'

    VehicleLimits:
      type: object
      properties:
        max_distance:
          type: number
          example: 50.0
        shift_time:
          type: number
        allowed_areas:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Location'

    Skills:
      description: a list of skills required to fulfill this job
      type: array
      items:
        type: number
        example: 1

    JobTask:
      type: object
      required:
        - places
      properties:
        places:
          type: array
          items:
            $ref: '#/components/schemas/JobPlace'
        tag:
          type: string
          example: 'parcel-tag'

    JobPlace:
      type: object
      required:
        - location
        - duration
      properties:
        location:
          $ref: '#/components/schemas/Location'
        duration:
          $ref: '#/components/schemas/Duration'
        times:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Time'

    Duration:
      type: number
      example: 30.59

    Relation:
      type: object
      required:
        - type
        - jobs
        - vehicle_id
      properties:
        type:
          type: string
          example: "TODO THIS IS AN ENUM"
        jobs:
          type: array
          items:
            type: string
            example: "JOBID82437"
        vehicle_id:
          type: string
          example: "VEH23984"
        shift_index:
          type: number
          example: 23

    Solution:
      type: object
      required:
        - statistics
        - tours
        - unassigned
      properties:
        statistics:
          $ref: '#/components/schemas/Statistic'
        tours:
          type: array
          items:
            $ref: '#/components/schemas/Tour'
        unassigned:
          type: array
          items:
            $ref: '#/components/schemas/UnassignedJob'
        extras:
          $ref: '#/components/schemas/Extras'
      description: The verbose solution providing statistics, tours and unassigned jobs. This will also provide further details such as extras.

    SimpleSolution:
      type: object
      required:
        - tours
        - unassigned
      properties:
        tours:
          type: array
          items:
            $ref: '#/components/schemas/SimplifiedTour'
        unassigned:
          type: array
          items:
            $ref: '#/components/schemas/UnassignedJob'

    Statistic:
      type: object
      required:
        - distance
        - duration
        - driving
      properties:
        distance:
          type: number
          description: The overall distance travelled in miles
          example: 500
        duration:
          $ref: '#/components/schemas/Duration'
        driving:
          type: string
          description: The total time spent driving
          example: "5:30"
        serving:
          type: string
          description: The total time spent serving jobs
          example: "2:10"
        waiting:
          type: string
          description: The total time spent waiting
          example: "5:30"

    Tour:
      type: object
      required:
        - vehicle_id
        - type_id
        - shift_index
        - statistic
      properties:
        vehicle_id:
          type: string
          example: "OXSAKS58473"
        type_id:
          type: string
          example: "TODO THIS ONE !!!!! ENUM expected"
        shift_index:
          type: number
          example: 1
        stops:
          type: array
          items:
            $ref: '#/components/schemas/Stop'
        statistic:
          $ref: '#/components/schemas/Statistic'

    SimplifiedTour:
      type: object
      required:
        - vehicle_index
      properties:
        vehicle_index:
          type: number
          example: 1
        stops:
          type: array
          items:
            $ref: '#/components/schemas/SimplifiedStop'

    Stop:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
        schedule:
          $ref: '#/components/schemas/Schedule'
        distance:
          type: number
          description: The distance travelled since the start
          example: 5
        load:
          type: array
          items:
            type: number
            example: 5
        activities:
          type: array
          description: Activities performed during this stop
          items:
            $ref: '#/components/schemas/Activity'

    SimplifiedStop:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
        schedule:
          $ref: '#/components/schemas/Schedule'
        distance:
          type: number
          description: The distance travelled since the start job
          example: 5

    Schedule:
      type: object
      properties:
        arrival:
          $ref: '#/components/schemas/Time'
        departure:
          $ref: '#/components/schemas/Time'

    Time:
      type: string
      description: time specified in RFC3339 format
      format: date-time
      example: '2020-10-02T15:00:00.05Z'

    Activity:
      type: object
      required:
        - job_id
        - type
      properties:
        job_id:
          type: string
          example: OXOXOX8383
        type:
          type: string
          example: 'TODO SOME ENUM'
        location:
          $ref: '#/components/schemas/Location'
        time:
          $ref: '#/components/schemas/Interval'
        job_tag:
          type: string
          description: An optional tag for the job
          example: 'TODO SOME ENUM'

    Interval:
      type: object
      required:
        - start
        - end
      properties:
        start:
          type: string
          format: time
          example: '09:12:33.001Z'
        end:
          type: string
          format: time
          example: '09:12:33.001Z'

    Location:
      type: object
      properties:
        lat:
          type: number
          description: The latitude of the location
          example: 51.0
        lng:
          type: number
          description: The longitude of the location
          example: 0.03874

    UnassignedJob:
      type: object
      properties:
        job_id:
          type: string
          example: OXXJ38347
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/UnassignedJobReason'

    UnassignedJobReason:
      type: object
      properties:
        code:
          type: number
          example: 232
        description:
          type: string
          example: the job was unassigned because no address could be found for it

    Extras:
      type: object
      properties:
        performance:
          type: array
          items:
            $ref: '#/components/schemas/Iteration'

    Iteration:
      type: object
      required:
        - number
        - cost
        - tours
        - unassigned
        - timestamp
      properties:
        number:
          type: number
          example: 34
        cost:
          type: number
          example: 373.00
        tours:
          type: number
          example: 28
        unassigned:
          type: number
          example: 29
        timestamp:
          $ref: '#/components/schemas/Time'

